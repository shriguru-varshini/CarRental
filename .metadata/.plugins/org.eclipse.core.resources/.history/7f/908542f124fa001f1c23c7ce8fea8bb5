package com.CarRentalSystem.CarRental.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.CarRentalSystem.CarRental.Models.Reservation;
import com.CarRentalSystem.CarRental.service.ReservationService;

@Controller
@RequestMapping("/api/reservations")
public class ReservationController {

    private final ReservationService reservationService;

    @Autowired
    public ReservationController(ReservationService reservationService) {
        this.reservationService = reservationService;
    }

    @GetMapping
    @ResponseBody
    public List<Reservation> fetchReservations() {
        return reservationService.getAllReservations();
    }

    @GetMapping("/{id}")
    @ResponseBody
    public ResponseEntity<Reservation> fetchReservationById(@PathVariable("id") int id) {
        return reservationService.getReservationById(id)
            .map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));
    }

    @PostMapping
    @ResponseBody
    public String addReservation(@RequestBody Reservation reservation) {
        reservationService.addReservation(reservation);
        return "Reservation added successfully";
    }

    @DeleteMapping("/{id}")
    @ResponseBody
    public ResponseEntity<String> deleteReservation(@PathVariable int id) {
        try {
            int rowsAffected = reservationService.deleteReservation(id);
            if (rowsAffected > 0) {
                return ResponseEntity.ok("Reservation Deleted Successfully");
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Reservation Not Found");
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error Deleting Reservation");
        }
    }

    @PutMapping
    @ResponseBody
    public String updateReservation(@RequestBody Reservation reservation) {
        reservationService.updateReservation(reservation);
        return "Reservation Updated Successfully";
    }
}
